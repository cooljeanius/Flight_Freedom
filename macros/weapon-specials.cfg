#textdomain wesnoth-Flight_Freedom

#taken from EoMA
#define WEAPON_SPECIAL_PRECISION
    # Canned definition of the Precision (targeting) ability to be included in a
    # [specials] clause.
    [chance_to_hit]
        id=precision
        name= _ "precision"
        description= _ "This attack always has a 80% chance to hit regardless of the defensive ability of the unit being attacked."
        special_note= _ "This unit has precision attacks, which always have a very high chance of hitting an opponent."
        value=80
        cumulative=no
    [/chance_to_hit]
#enddef

#taken from EoMA
#define WEAPON_SPECIAL_SKILLED
    [chance_to_hit]
        id=eoma_skilled
        name= _ "skilled"
        description=_"This attack always has a minimum 60% chance to hit."
        value=60
        cumulative=yes
    [/chance_to_hit]
#enddef

#taken from EoMA
#define WEAPON_SPECIAL_NOCOUNTERATTACK
    [attacks]
        id=nocounter
        name= _ "no counter-attack"
        description= _ "The opponent has a 0% chance to hit when this unit is attacking. Does not work on opponents with berserk."
        special_note= _ "Some of this unit's attacks are not subject to enemy counter-attack."
        value=0
        cumulative=no
        active_on=offense
        apply_to=opponent

        [filter_opponent]
            [filter_weapon]
                [not]
                    special_type=berserk
                [/not]
            [/filter_weapon]
        [/filter_opponent]
    [/attacks]
#enddef

#define EOMA_INDIRECTLY_DAMAGED_UNIT_EXPERIENCE_EVENT
    [event]
        name=attack end
        first_time_only=no
        id=eoma_indirect_damage_xp_event
        [remove_array_duplicates]
            name=EoMa_indirectly_damaged_unit
            attribute=id
        [/remove_array_duplicates]
        [foreach]
            array=EoMa_indirectly_damaged_unit
            [do]
                # give indirectly damaged unit fight xp
                [if]
                    [have_unit]
                        id=$this_item.id
                        [not]
                            ability=eoma_soul_catcher
                        [/not]
                    [/have_unit]
                    [then]
                        [modify_unit]
                            [filter]
                                id=$this_item.id
                            [/filter]
                            experience="$($this_unit.experience + $unit.level)"
                        [/modify_unit]
                    [/then]
                [/if]
                # give primary unit kill xp
                [if]
                    [have_unit]
                        id=$this_item.id
                    [/have_unit]
                    [else]
                        {VARIABLE expkill $this_item.level}
                        {VARIABLE_OP expkill multiply 8}
                        {IF_VAR expkill equals 0 (
                            [then]
                                {VARIABLE expkill 4}
                            [/then]
                        )}
                        [modify_unit]
                            [filter]
                                id=$unit.id
                            [/filter]
                            experience="$($this_unit.experience + $expkill)"
                        [/modify_unit]
                        {CLEAR_VARIABLE expkill}
                    [/else]
                [/if]
            [/do]
        [/foreach]

        {CLEAR_VARIABLE EoMa_indirectly_damaged_unit}
    [/event]
#enddef

#taken from EoMA
# wmllint: unbalanced-on
#define WEAPON_SPECIAL_ALLAROUND CHANCETOHIT
    # wmlxgettext: [attack]
    # wmlxgettext: [specials]
    [dummy]
        id=allaround
        name= _ "all around"
        active_on=offense
        description= _ "This attack, when used offensively, has a chance to hit adjacent enemy units."
        special_note= _ "Some of this unit's attacks can strike all adjacent targets."
        [filter_opponent]
            [filter_weapon]
                [not]
                    special_type=berserk
                [/not]
            [/filter_weapon]
        [/filter_opponent]
    [/dummy]
[/specials]
# wmlindent: start ignoring
[/attack]
# wmlindent: stop ignoring

[event]
    name=attacker hits,attacker misses
    first_time_only=no
    id=allaround_event
    [filter_attack]
        special_id=allaround
    [/filter_attack]
    [filter_second_attack]
        [not]
            special_type=berserk
        [/not]
    [/filter_second_attack]

    [store_unit]
        [filter]
            [filter_adjacent]
                x,y=$x1,$y1
                is_enemy=yes
            [/filter_adjacent]
            [not]
                x,y=$x2,$y2
            [/not]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        variable=bystander
    [/store_unit]

    {VARIABLE areadmg $weapon.damage}

    [if]
        {VARIABLE_CONDITIONAL unit.status.slowed boolean_equals yes}
        [then]
            {VARIABLE_OP areadmg divide 2}
            {VARIABLE_OP areadmg round floor}
        [/then]
    [/if]
    [foreach]
        array=bystander
        [do]
            {RANDOM 1..100}
            [if]
                {VARIABLE_CONDITIONAL random less_than_equal_to {CHANCETOHIT}}
                [then]
                    [EoMa_remember_indirectly_damaged_unit]
                        x,y=$this_item.x,$this_item.y
                    [/EoMa_remember_indirectly_damaged_unit]
                    [harm_unit]
                        [filter]
                            x,y=$this_item.x,$this_item.y
                            [not]
                                [filter_wml]
                                    [status]
                                        petrified=yes
                                    [/status]
                                [/filter_wml]
                            [/not]
                        [/filter]
                        [filter_second]
                            x,y=$x1,$y1
                        [/filter_second]
                        amount=$areadmg
                        damage_type=$weapon.type
                        alignment=$unit.alignment
                        fire_event=yes
                        animate=defender
                        delay=0
                        experience=no
                    [/harm_unit]
                [/then]
            [/if]
        [/do]
    [/foreach]
[/event]

{EOMA_INDIRECTLY_DAMAGED_UNIT_EXPERIENCE_EVENT}

[+attack]
# wmlindent: start ignoring

[+specials]
# wmlxgettext: [/specials]
# wmlxgettext: [/attack]
# wmlindent: stop ignoring
#enddef
# wmllint: unbalanced-off

#taken from EoMA
#define EOMA_AOE_HARM_UNIT_ATTACK

    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [enemy_of]
                    side=$unit.side
                [/enemy_of]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x1,$y1
        [/filter_second]
        amount=$areadmg
        damage_type=$weapon.type
        alignment=$unit.alignment
        fire_event=yes
        animate=defender
        delay=0
        experience=no
    [/harm_unit]
    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [allied_with]
                    side=$unit.side
                [/allied_with]
                [or]
                    side=$unit.side
                [/or]
            [/filter_side]
        [/filter]
        [filter_second]
            x,y=$x1,$y1
        [/filter_second]
        amount=$areadmg
        damage_type=$weapon.type
        alignment=$unit.alignment
        fire_event=yes
        animate=defender
        kill=no
        delay=0
        experience=no
    [/harm_unit]
#enddef

#define EOMA_AOE_HARM_UNIT_DEFENSE

    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [enemy_of]
                    side=$second_unit.side
                [/enemy_of]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x2,$y2
        [/filter_second]
        amount=$areadmg
        damage_type=$second_weapon.type
        alignment=$second_unit.alignment
        fire_event=yes
        animate=defender
        delay=0
        experience=no
    [/harm_unit]
    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [allied_with]
                    side=$second_unit.side
                [/allied_with]
                [or]
                    side=$second_unit.side
                [/or]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x2,$y2
        [/filter_second]
        amount=$areadmg
        damage_type=$second_weapon.type
        alignment=$second_unit.alignment
        fire_event=yes
        animate=defender
        kill=no
        delay=0
        experience=no
    [/harm_unit]
#enddef

# Following specials close the [specials] tag and open it later to
# insert a weapon _weight value, eliminating the need to specify it manually
# within the unit's WML file. Therefore, they are intentionally unbalanced WML

# wmllint: unbalanced-on
#define WEAPON_SPECIAL_CLEAVE_CUSTOM VALUE DISPLAYVALUE
# wmlindent: start ignoring
# wmlxgettext: [attack]
# wmlxgettext: [specials]

# wmlindent: stop ignoring
    [dummy]
        id=eoma_cleave{DISPLAYVALUE}
        name= _ "cleave"+" "+{DISPLAYVALUE}+"%"
        description=_"A unit with this ability can hurt units that are adjacent to the attacker and the defender at the same time. The damage dealt equals a specified % of the base damage.
This ability does not work against berserker attacks.
This ability works even when defending.
This ability works even against allies.
Secondary target may be hit even when primary attack misses.
Chance to hit secondary target: 50%
Base damage multiplier:"+" "+{DISPLAYVALUE}+"%"
        [filter_opponent]
            [filter_weapon]
                [not]
                    special_type=berserk
                [/not]
            [/filter_weapon]
        [/filter_opponent]
    [/dummy]
[/specials]
# wmlindent: start ignoring
[/attack]
# wmlindent: stop ignoring

[event]
    name=attacker hits,attacker misses
    first_time_only=no
    id=eoma_cleave{DISPLAYVALUE}_event
    [filter_attack]
        special_id=eoma_cleave{DISPLAYVALUE}
    [/filter_attack]
    [filter_second_attack]
        [not]
            special_type=berserk
        [/not]
    [/filter_second_attack]

    [store_unit]
        [filter]
            [filter_adjacent]
                x,y=$x2,$y2
            [/filter_adjacent]
            [filter_adjacent]
                x,y=$x1,$y1
            [/filter_adjacent]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        variable=bystander
    [/store_unit]

    {VARIABLE areadmg $weapon.damage}
    {VARIABLE_OP areadmg multiply {VALUE}}

    [if]
        {VARIABLE_CONDITIONAL unit.status.slowed boolean_equals yes}
        [then]
            {VARIABLE_OP areadmg divide 2}
            {VARIABLE_OP areadmg round floor}
        [/then]
    [/if]

    [foreach]
        array=bystander
        [do]
            {RANDOM 1..100}
            [if]
                {VARIABLE_CONDITIONAL random less_than_equal_to 50}
                [then]
                    [EoMa_remember_indirectly_damaged_unit]
                        x,y=$this_item.x,$this_item.y
                    [/EoMa_remember_indirectly_damaged_unit]
                    {EOMA_AOE_HARM_UNIT_ATTACK}
                [/then]
            [/if]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE bystander}
[/event]

[event]
    name=defender hits,defender misses
    first_time_only=no
    id=eoma_cleave{DISPLAYVALUE}_event2
    [filter_second_attack]
        special_id=eoma_cleave{DISPLAYVALUE}
    [/filter_second_attack]
    [filter_attack]
        [not]
            special_type=berserk
        [/not]
    [/filter_attack]

    [store_unit]
        [filter]
            [filter_adjacent]
                x,y=$x1,$y1
            [/filter_adjacent]
            [filter_adjacent]
                x,y=$x2,$y2
            [/filter_adjacent]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        variable=bystander
    [/store_unit]

    {VARIABLE areadmg $second_weapon.damage}
    {VARIABLE_OP areadmg multiply {VALUE}}

    [if]
        {VARIABLE_CONDITIONAL second_unit.status.slowed boolean_equals yes}
        [then]
            {VARIABLE_OP areadmg divide 2}
            {VARIABLE_OP areadmg round floor}
        [/then]
    [/if]

    [foreach]
        array=bystander
        [do]
            {RANDOM 1..100}
            [if]
                {VARIABLE_CONDITIONAL random less_than_equal_to 50}
                [then]
                    [EoMa_remember_indirectly_damaged_unit]
                        x,y=$this_item.x,$this_item.y
                    [/EoMa_remember_indirectly_damaged_unit]
                    {EOMA_AOE_HARM_UNIT_DEFENSE}
                [/then]
            [/if]
        [/do]
    [/foreach]
[/event]

{EOMA_INDIRECTLY_DAMAGED_UNIT_EXPERIENCE_EVENT}

[+attack]
# wmlindent: start ignoring

[+specials]
# wmlxgettext: [/specials]
# wmlxgettext: [/attack]
# wmlindent: stop ignoring
#enddef

#define WEAPON_SPECIAL_ATTACK_ONLY
    # wmlxgettext: [specials]
    [damage]
        id=attack_only
        name= _ "attack only"
        name_inactive= _ "attack only"
        description= _ "This weapon will never be used on defense."
        description_inactive= _ "This weapon will never be used on defense."
        special_note= _ "Some of this unit's attacks are not available except on offense."
        multiply=0
        active_on=defense
    [/damage]
# wmlindent: start ignoring
    [/specials]
    defense_weight=0
    [+specials]
    # wmlxgettext: [/specials]
# wmlindent: stop ignoring
#enddef

#define WEAPON_SPECIAL_DEFEND_ONLY
    # wmlxgettext: [specials]
    [damage]
        id=defend_only
        name= _ "defend only"
        name_inactive= _ "defend only"
        description= _ "This weapon will only be available for defense."
        description_inactive= _ "This weapon will only be available for defense."
        special_note= _ "Some of this unit's attacks are not available except on defense."
        multiply=0
        active_on=offense
    [/damage]
# wmlindent: start ignoring
    [/specials]
    attack_weight=0
    [+specials]
    # wmlxgettext: [/specials]
# wmlindent: stop ignoring
#enddef
# wmllint: unbalanced-off
