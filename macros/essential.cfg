# wmllint: no translatables

#undef MAP
#define MAP NUMBER
    map_file=~add-ons/Flight_Freedom/maps/drake{NUMBER}.map
#enddef

#undef MAPB
#define MAPB NUMBER
    map_file=~add-ons/Flight_Freedom/maps_b/drake{NUMBER}.map
#enddef

#define NARRATOR_ICON
    image="misc/icon-drake.png"
    second_image="misc/icon-drake.png"
#enddef

#define LAVA_DAMAGE
    [event]
        name=new turn
        first_time_only=no
        [harm_unit]
            [filter]
                [filter_location]
                    terrain=Yl
                [/filter_location]
                [not]
                    type=Lava Monster, Lava Beast
                [/not]
            [/filter]
            amount=4
            kill=no
        [/harm_unit]
    [/event]
#enddef

#define DRAKE_GUARD_STONE X Y SIDE
    [unit]
        type=Drake Guard
        x={X}
        y={Y}
        side={SIDE}
        [status]
            petrified=yes
        [/status]
    [/unit]
#enddef

#define RDRAKE_GUARD_STONE X Y SIDE
    [unit]
        type=Drake Guard
        x={X}
        y={Y}
        side={SIDE}
        [status]
            petrified=yes
        [/status]
        facing=sw
    [/unit]
#enddef

#define GARGOYLE_STONING SIDE
    [event]
        name=side {SIDE} turn
        first_time_only=no
        [store_time_of_day]
        [/store_time_of_day]
        [if]
            [variable]
                name=time_of_day.lawful_bonus
                greater_than=0
            [/variable]
            [then]
                [disallow_recruit]
                    side={SIDE}
                    type=Gargoyle
                [/disallow_recruit]
                [petrify]
                    side={SIDE}
                    type=Gargoyle
                [/petrify]
            [/then]
            [else]
                [allow_recruit]
                    side={SIDE}
                    type=Gargoyle
                [/allow_recruit]
                [unpetrify]
                    side={SIDE}
                    type=Gargoyle
                [/unpetrify]
            [/else]
        [/if]
        {CLEAR_VARIABLE time_of_day}
    [/event]
#enddef

#included in every scenario
#empty so far
#define FTF_COMMON

#enddef

#define MESSAGE_ON_FIRST_UNIT MESSAGE
    [message]
        speaker=unit
        message={MESSAGE}
    [/message]
#enddef

#define MESSAGE_ON_SECOND_UNIT MESSAGE
    [message]
        speaker=second_unit
        message={MESSAGE}
    [/message]
#enddef

#define CLEAR_SHROUD SIDE X Y RADIUS
    # Clears fog in a specific area for the given side.
    [remove_shroud]
        [filter_side]
            side={SIDE}
        [/filter_side]
        x,y={X},{Y}
        radius={RADIUS}
    [/remove_shroud]
#enddef

#define SPIDERWEB_SLOWING X Y SIDE
    [event]
        name=side turn
        first_time_only=no
        [if]
            [have_unit]
                x={X}
                y={Y}
                side={SIDE}
            [/have_unit]
            [then]
                [store_unit]
                    [filter]
                        x={X}
                        y={Y}
                        side={SIDE}
                    [/filter]
                    variable=webbed_guys
                [/store_unit]
                [foreach]
                    array=webbed_guys
                    variable=this_item
                    readonly=no
                    [do]
                        {VARIABLE this_item.status.slowed yes}
                        [unstore_unit]
                            variable=this_item
                        [/unstore_unit]
                    [/do]
                [/foreach]
                {CLEAR_VARIABLE webbed_guys}
                #would be more straightforward, but the floating labels every side turn are IMO distracting
#ifdef BE_MORE_STRAIGHTFORWARD_BUT_DISTRACTING
                [harm_unit]
                    [filter]
                        x={X}
                        y={Y}
                        side={SIDE}
                    [/filter]
                    amount=0
                    slowed=yes
                    animate=no
                [/harm_unit]
#endif
            [/then]
        [/if]
    [/event]
#enddef

#define FIRE_EVENT_ON_STUMBLE_UPON _EVT_ID _SUF
    [event]
        name=sighted
        [filter]
            {_SUF}
        [/filter]
        [filter_second]
            side=1
        [/filter_second]
        [redraw][/redraw]
        [fire_event]
            name={_EVT_ID}
            [primary_unit]
                x,y=$x2,$y2
            [/primary_unit]
            [secondary_unit]
                x,y=$x1,$y1
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        name=sighted
        [filter]
            side=1
        [/filter]
        [filter_second]
            {_SUF}
        [/filter_second]
        [redraw][/redraw]
        [fire_event]
            name={_EVT_ID}
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
            [secondary_unit]
                x,y=$x2,$y2
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        name=attack
        [filter]
            {_SUF}
        [/filter]
        [filter_second]
            side=1
        [/filter_second]
        [fire_event]
            name={_EVT_ID}
            [primary_unit]
                x,y=$x2,$y2
            [/primary_unit]
            [secondary_unit]
                x,y=$x1,$y1
            [/secondary_unit]
        [/fire_event]
    [/event]
    [event]
        name=attack
        [filter]
            side=1
        [/filter]
        [filter_second]
            {_SUF}
        [/filter_second]
        [fire_event]
            name={_EVT_ID}
            [primary_unit]
                x,y=$x1,$y1
            [/primary_unit]
            [secondary_unit]
                x,y=$x2,$y2
            [/secondary_unit]
        [/fire_event]
    [/event]
#enddef

#designed by Elvish_Hunter
#define HEX_SIGHTED_EVENT X Y SIDE
    name=moveto
    [filter]
        side={SIDE}
    [/filter]
    [filter_condition]
        [have_location]
            x,y={X},{Y}
            [filter_vision]
                visible=yes
                respect_fog=yes
                side={SIDE}
            [/filter_vision]
        [/have_location]
    [/filter_condition]
#enddef

#there almost has to be a better way to do this
#define HEX_SIGHTED_EVENT_TWOSIDES X Y SIDE1 SIDE2
    name=moveto
    [filter]
        side={SIDE1}
        [or]
            side={SIDE2}
        [/or]
    [/filter]
    [filter_condition]
        [have_location]
            x,y={X},{Y}
            [filter_vision]
                visible=yes
                respect_fog=yes
                side={SIDE1}
            [/filter_vision]
        [/have_location]
        [or]
            [have_location]
                x,y={X},{Y}
                [filter_vision]
                    visible=yes
                    respect_fog=yes
                    side={SIDE2}
                [/filter_vision]
            [/have_location]
        [/or]
    [/filter_condition]
#enddef

#define DELIVERY_ITEM X Y XVAR YVAR IMAGE OVERLAY CARRYVAR
    [event]
        name=prestart
        {VARIABLE {XVAR} {X}}
        {VARIABLE {YVAR} {Y}}
        {VARIABLE {CARRYVAR} null}

        [item]
            x=${XVAR}
            y=${YVAR}
            image={IMAGE}
        [/item]
    [/event]

    [event]
        name=moveto
        first_time_only=no
        [filter]
            x=${XVAR}
            y=${YVAR}
        [/filter]

        [if]
            [variable]
                name={CARRYVAR}
                equals=null
            [/variable]
            [then]
                {VARIABLE {CARRYVAR} $unit.id}

                [remove_item]
                    x=${XVAR}
                    y=${YVAR}
                    image={IMAGE}
                [/remove_item]
                [unit_overlay]
                    x=${XVAR}
                    y=${YVAR}
                    image={OVERLAY}
                [/unit_overlay]
            [/then]
        [/if]
    [/event]

    [event]
        name=die
        [filter]
            id=${CARRYVAR}
        [/filter]
        first_time_only=no

        {VARIABLE {XVAR} $x1}
        {VARIABLE {YVAR} $y1}
        {VARIABLE {CARRYVAR} null}

        [item]
            x=$x1
            y=$y1
            image={IMAGE}
        [/item]
    [/event]

#enddef

#inspired by the similar event in Wings of Victory
#define RECRUIT_RUN_FILTER X1 Y1 X2 Y2 SIDE EXTRA_FILTER
    [event]
        name=prerecruit,prerecall
        first_time_only=no
        [filter]
            side={SIDE}
            x,y={X2},{Y2}
            {EXTRA_FILTER}
        [/filter]
        [store_unit]
            [filter]
                x,y={X2},{Y2}
            [/filter]
            kill=yes
            variable=recruit_store
        [/store_unit]
        [unstore_unit]
            variable=recruit_store
            x,y={X1},{Y1}
        [/unstore_unit]
        [move_unit]
            x,y={X1},{Y1}
            to_x={X2}
            to_y={Y2}
        [/move_unit]
        {CLEAR_VARIABLE recruit_store}
    [/event]
#enddef

#define RECRUIT_RUN X1 Y1 X2 Y2 SIDE
    {RECRUIT_RUN_FILTER {X1} {Y1} {X2} {Y2} {SIDE} ()}
#enddef

#moved from Landfall to here since it's also used by Southern Shore, and I may want to do something else with it later
#define WESNOTH_THIRD_FLEET_APPEARANCE X Y SIDE
    [unit]
        x,y={X},{Y}
        type=Dreadnought
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Dreadnought
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Dreadnought
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Dreadnought
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Dreadnought
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Battleship
        side={SIDE}
        generate_name=yes
    [/unit]
    [unit]
        x,y={X},{Y}
        type=Battleship
        side={SIDE}
        generate_name=yes
    [/unit]
    [scroll_to_unit]
        x,y={X},{Y}
    [/scroll_to_unit]
    [delay]
        time=1000
    [/delay]
#enddef

#define NEW_UNIT_DISPLACE_CURRENT X Y DETAILS
    [if]
        [have_unit]
            x={X}
            y={Y}
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x={X}
                    y={Y}
                [/filter]
                kill=yes
                variable=tempstore_displace
            [/store_unit]
            [unit]
                x={X}
                y={Y}
                {DETAILS}
            [/unit]
            [unstore_unit]
                variable=tempstore_displace
                find_vacant=yes
            [/unstore_unit]
            {CLEAR_VARIABLE tempstore_displace}
        [/then]
        [else]
            [unit]
                x={X}
                y={Y}
                {DETAILS}
            [/unit]
        [/else]
    [/if]
#enddef

#define MOVE_UNIT_DISPLACE_CURRENT X Y DETAILS
    [if]
        [have_unit]
            x={X}
            y={Y}
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x={X}
                    y={Y}
                [/filter]
                kill=yes
                variable=tempstore_displace
            [/store_unit]
            [move_unit]
                to_x={X}
                to_y={Y}
                {DETAILS}
            [/move_unit]
            [unstore_unit]
                variable=tempstore_displace
                find_vacant=yes
            [/unstore_unit]
            {CLEAR_VARIABLE tempstore_displace}
        [/then]
        [else]
            [move_unit]
                to_x={X}
                to_y={Y}
                {DETAILS}
            [/move_unit]
        [/else]
    [/if]
#enddef

#define TELEPORT_UNIT_DISPLACE_CURRENT X Y DETAILS
    [if]
        [have_unit]
            x={X}
            y={Y}
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x={X}
                    y={Y}
                [/filter]
                kill=yes
                variable=tempstore_displace
            [/store_unit]
            [store_unit]
                [filter]
                    {DETAILS}
                [/filter]
                kill=yes
                variable=tempstore_move
            [/store_unit]
            [unstore_unit]
                x={X}
                y={Y}
                variable=tempstore_move
            [/unstore_unit]
            {CLEAR_VARIABLE tempstore_move}
            [unstore_unit]
                variable=tempstore_displace
                find_vacant=yes
            [/unstore_unit]
            {CLEAR_VARIABLE tempstore_displace}
        [/then]
        [else]
            [store_unit]
                [filter]
                    {DETAILS}
                [/filter]
                kill=yes
                variable=tempstore_move
            [/store_unit]
            [unstore_unit]
                x={X}
                y={Y}
                variable=tempstore_move
            [/unstore_unit]
            {CLEAR_VARIABLE tempstore_move}
        [/else]
    [/if]
#enddef

#define DISPLACE_UNIT_TO_VACANT X Y
    [if]
        [have_unit]
            x={X}
            y={Y}
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    x={X}
                    y={Y}
                [/filter]
                variable=tempstore_displace
                kill=yes
            [/store_unit]
            [unit]
                side=1
                type=Invisible
                id=blocker
                x={X}
                y={Y}
            [/unit]
            [unstore_unit]
                x={X}
                y={Y}
                variable=tempstore_displace
                find_vacant=yes
            [/unstore_unit]
            [kill]
                id=blocker
            [/kill]
            {CLEAR_VARIABLE tempstore_displace}
        [/then]
    [/if]
#enddef

#define BLOCK_FIRE_DRAKE_ADVANCEMENT
    [object]
        silent=yes
        duration=forever
        [effect]
            [filter]
                type=Drake Burner
            [/filter]
            apply_to=remove_advancement
            types=Fire Drake
        [/effect]
    [/object]
#enddef

#define PILLAGERS_PILLAGE
    [event]
        name=capture
        first_time_only=no
        [filter]
            type=Goblin Pillager
        [/filter]
        [capture_village]
            x,y=$x1,$y1
        [/capture_village]
        [sound]
            name=torch.ogg
        [/sound]
        [gold]
            side=$unit.side
            amount=20
        [/gold]
        [terrain]
            x=$x1
            y=$y1
            terrain=^Ybv #wmllint: ignore
            layer=overlay
        [/terrain]
    [/event]
#enddef

#define INFLUENCE_HIT_ODDS FILTER ODDS
    [event]
        name=pre attack
        first_time_only=no
        [filter_second]
            {FILTER}
        [/filter_second]
        [object]
            [filter]
                x,y=$x1,$y1
            [/filter]
            [effect]
                apply_to=attack
                set_accuracy={ODDS}
                remove_specials=marksman,magical,precision
            [/effect]
            duration=turn
            silent=yes
            id=decrease_hit_pct
            take_only_once=no
        [/object]
    [/event]

    [event]
        name=attack end
        first_time_only=no
        [filter_second]
            {FILTER}
        [/filter_second]
        [remove_object]
            [filter]
                x,y=$x1,$y1
            [/filter]
            object_id=decrease_hit_pct
        [/remove_object]
    [/event]
#enddef

#define PLAY_DEFEAT_MUSIC
    [lua]
        code = <<
            local defeat_tracks = {
                "defeat.ogg",
                "defeat2.ogg"
            }
            local defeat_track = defeat_tracks[math.random(#defeat_tracks)]
            wesnoth.audio.music_list.clear()
            wesnoth.audio.music_list.add("silence.ogg", true)
            wesnoth.audio.music_list.play(defeat_track)
        >>
    [/lua]
#enddef

#define ENDLEVEL_CONTINUE_AFTER_DEFEAT EXTRA
    {PLAY_DEFEAT_MUSIC}
    [endlevel]
        result=victory
        carryover_report=no
        linger_mode=yes
        bonus=no
        music=silence.ogg
        {EXTRA}
    [/endlevel]
#enddef

#define ENDLEVEL_CONTINUE_AFTER_DEFEAT_NO_LINGER EXTRA
    {PLAY_DEFEAT_MUSIC}
    [endlevel]
        result=victory
        carryover_report=no
        linger_mode=no
        bonus=no
        music=silence.ogg
        {EXTRA}
    [/endlevel]
#enddef

#define PLOP_ENCAMPMENT X Y
    [terrain_mask]
        x={X}
        y={Y}
        alignment=even
        mask="
Ce, Ce, Ce
Ce, Ke, Ce
_f, Ce, _f
"
    [/terrain_mask]
#enddef

#define UNSTORE_ALL_UNITS VARIABLE
    [foreach]
        array={VARIABLE}
        variable=this_item
        readonly=yes
        [do]
            [unstore_unit]
                variable=this_item
            [/unstore_unit]
        [/do]
    [/foreach]
#enddef

#if putting a unit into the recall list during a scenario that needs protection
#define RESTORE_RECALL_REGISTER_UNIT ID UNIQ
    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=restore_recall_tempstore_{UNIQ}
        kill=no
    [/store_unit]
    {VARIABLE restore_recall_existed_{UNIQ} yes}
    {VARIABLE restore_recall_recalled_{UNIQ} no}
#enddef

#ideally there'd be a way to mark units as non-dismissible from the recall list
#but until then this will have to do
#define RESTORE_RECALL_AFTER_DISMISS ID UNIQ
    [event]
        name=prestart
        [if]
            [have_unit]
                id={ID}
                search_recall_list=yes
            [/have_unit]
            [then]
                {RESTORE_RECALL_REGISTER_UNIT {ID} {UNIQ}}
            [/then]
            [else]
                {VARIABLE restore_recall_existed_{UNIQ} no}
            [/else]
        [/if]
    [/event]

    [event]
        name=prerecall
        [filter]
            id={ID}
        [/filter]
        {VARIABLE restore_recall_recalled_{UNIQ} yes}
    [/event]

    [event]
        name=scenario_end
        #if we haven't recalled the unit and it's no longer in the recall list,
        #conclude that player dismissed it and bring it back
        [if]
            [not]
                [have_unit]
                    id={ID}
                    search_recall_list=yes
                [/have_unit]
            [/not]
            [and]
                [variable]
                    name=restore_recall_existed_{UNIQ}
                    boolean_equals=yes
                [/variable]
            [/and]
            [and]
                [variable]
                    name=restore_recall_recalled_{UNIQ}
                    boolean_equals=no
                [/variable]
            [/and]
            [then]
                [unstore_unit]
                    variable=restore_recall_tempstore_{UNIQ}
                [/unstore_unit]
            [/then]
        [/if]
        {CLEAR_VARIABLE restore_recall_recalled_{UNIQ}}
        {CLEAR_VARIABLE restore_recall_existed_{UNIQ}}
        {CLEAR_VARIABLE restore_recall_tempstore_{UNIQ}}
    [/event]
#enddef

#define RESTORE_RECALL_DEREGISTER_UNIT UNIQ
    {VARIABLE restore_recall_existed_{UNIQ} no}
#enddef

#define RESTORE_RECALL_AFTER_DISMISS_BRANCH_A
    {RESTORE_RECALL_AFTER_DISMISS Hartholar 1}
    {RESTORE_RECALL_AFTER_DISMISS (Morlin Ka) 2}
#enddef

#define RESTORE_RECALL_AFTER_DISMISS_BRANCH_B
    {RESTORE_RECALL_AFTER_DISMISS (Morlin Ka) 2}
#enddef

#define FLYING_DRAKES_FILTER_KEY
type_adv_tree=Cave Drake,Drake Chieftain,Drake Chieftain no_death_anim,Drake Burner,Drake Fighter,Drake Glider
#enddef
